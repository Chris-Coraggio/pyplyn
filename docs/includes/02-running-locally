<h1 id="running-pyplyn-locally">Running Pyplyn locally</h1>

<p>This section assumes that you have access to a configured Refocus instance. Access to an Argus instance is recommended, but not required.</p>

<p>Whether you&rsquo;re using Refocus, Argus, or both, they should contain some data that you can query for this Pyplyn demo.</p>

<p>If that&rsquo;s not the case, see the following guides:</p>

<ul>
<li><a href="https://github.com/Salesforce/Argus/wiki/Getting%20Started">Getting started with Argus</a></li>
<li><a href="https://salesforce.github.io/refocus/docs/01-quickstart.html#getting-started-with-refocus">Getting started with Refocus</a></li>
</ul>

<p>Follow these next steps to get Pyplyn up-and-running on your local environment.</p>

<h2 id="clone-the-repository">Clone the repository</h2>

<blockquote>
<p>1. Clone the repository</p>
</blockquote>
<pre class="highlight shell"><code>git clone https://github.com/salesforce/pyplyn
</code></pre>
<h2 id="create-configuration-files">Create configuration files</h2>

<blockquote>
<p>2. Copy pyplyn&rsquo;s configs files to a local dir and prepare an empty directory for your configurations</p>
</blockquote>
<pre class="highlight plaintext"><code># Make a copy of the config files
mkdir ~/pyplyn-config
cp duct/src/main/resources/app-config.example.json ~/pyplyn-config/app-config.example.json
cp duct/src/main/resources/connectors.example.json ~/pyplyn-config/connectors.json

# this dir will hold the ETL configurations that Pyplyn will process
mkdir ~/pyplyn-config/configurations
</code></pre>
<p>Copy and rename <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/resources/app-config.example.json">app-config.example.json</a> and <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/resources/connectors.example.json">connectors.example.json</a> to a local file system directory.</p>

<h2 id="connectors">Connectors</h2>

<blockquote>
<p>3. Configure <em>connectors.json</em></p>
</blockquote>
<pre class="highlight json"><code><span class="w">  </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nt">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"refocus-default"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"endpoint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://url-to-your-refocus-instance/v1/"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"username"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"password"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyHost"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyPort"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nt">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"refocus-user-and-pass"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"endpoint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://url-to-your-refocus-instance/v1/"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"username"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"base64(pass)"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyHost"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyPort"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nt">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"refocus-token"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"endpoint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://url-to-your-refocus-instance/v1/"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"username"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"base64(refocus-token)"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyHost"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyPort"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nt">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"argus"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"endpoint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://url-to-your-argus-instance/argusws/"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"username"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"base64(pass)"</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyHost"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
      </span><span class="nt">"proxyPort"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span></code></pre>
<p>Connectors define the endpoints that Pyplyn configurations should be processed against.</p>

<p>Define them in the <em>connectors.json</em> file. Each connector should specify the following parameters:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td>required</td>
<td>this id is used to identify the connector in the (Extract)[#extract] and (Load)[#load] sections of your configurations; it should be unique for all connectors loaded into Pyplyn</td>
</tr>
<tr>
<td>endpoint</td>
<td>required</td>
<td>the URL of the service represented by this connector</td>
</tr>
<tr>
<td>username</td>
<td>optional</td>
<td>username used for authentication, or null if not required</td>
</tr>
<tr>
<td>password</td>
<td>optional</td>
<td>password required for authenticating to this endpoint, or null if not required; this string should always be BASE64-encoded when specified in the <em>connectors.json</em> file</td>
</tr>
<tr>
<td>proxyHost</td>
<td>optional</td>
<td>a hostname pointing to an HTTP proxy, or null if not used</td>
</tr>
<tr>
<td>proxyPort</td>
<td>optional</td>
<td>the port the proxy listens on, or null if not used</td>
</tr>
</tbody></table>

<aside class="notice">You don&rsquo;t need to define all four connectors from our example.  If you want to write a configuration that extracts data from Refocus, transforms it and then pushes it back, only need to define a single Refocus connector section, depending on the method you are using for authenticating.
</aside>

<p>Read more about <a href="https://salesforce.github.io/refocus/docs/10-security.html">Refocus&rsquo; security options</a> and choose either user/password or token-based authentication. If you&rsquo;re using the token-based auth, the correct way to specify it in <em>connectors.json</em> is to pass <em>username</em> as <strong><em>null</em></strong> and <em>password</em> as the <a href="https://www.base64encode.org/">BASE64 encoded</a> value of the token string obtained from the <em>&hellip;/tokens/new</em> endpoint of Refocus.</p>

<h2 id="configure-the-app">Configure the app</h2>

<p>The <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/appconfig/AppConfig.java">AppConfig</a> represents the primary configuration object used by Pyplyn to define system settings, connectors, configurations, alerting thresholds (for monitoring itself), and the multi-node/clustering set-up.</p>

<p><br /></p>

<p>Edit <em>app-config.json</em> and update:</p>

<ul>
<li><em>configurationsPath</em> to point to the <em>~/pyplyn-config/configurations</em> directory created at step (2) above</li>
<li><em>connectorsPath</em> to point to your <em>connectors.json</em> file specified at step (3) above: <em>~/pyplyn-config/connectors.json</em></li>
</ul>

<blockquote>
<p>4. Update <em>app-config.json</em> and set the required paths</p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"configurationsPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/absolute/path/to/pyplyn-config/configurations"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"connectorsPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/absolute/path/to/pyplyn-config/connectors.json"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<h2 id="build-pyplyn">Build Pyplyn</h2>

<blockquote>
<p>5. Package and run the project</p>
</blockquote>
<pre class="highlight shell"><code><span class="c"># Update the path to where you cloned Pyplyn</span>
<span class="nb">cd</span> /path/to/pyplyn

<span class="c"># Run all tests and build</span>
mvn clean package

<span class="c"># Execute Pyplyn (will be packaged as a shaded JAR)</span>

<span class="sb">```</span>shell
<span class="nb">export </span><span class="nv">PYPLYN_VERSION</span><span class="o">=</span><span class="sb">`</span>cat target/version.txt<span class="sb">`</span>
java -jar target/pyplyn-<span class="nv">$PYPLYN_VERSION</span>.jar --config ~/pyplyn-config/app-config.json
</code></pre>
<blockquote>
<p>This should output something similar to the following:</p>
</blockquote>
<pre class="highlight plaintext"><code>2017-01-20 15:04:21,141 [ INFO] main  DuctExecutorWrapper:schedule:52   -&gt; Starting main execution in 5s
2017-01-20 15:04:21,287 [ INFO] pool-1-thread-1 SinglePartitionConfigurationProvider:mergeConfigurations:123   -&gt; Updated configuration set; 0 possibly updated configs, 0 new configs
</code></pre>
<blockquote>
<p>If you see any Java exceptions, re-check your paths and correctness of your configuration files; the exceptions should have enough information to point you to the actual problem.</p>
</blockquote>

<p>Pyplyn is using Maven to manage its build lifecycle. </p>

<p>You can build it by running <code class="prettyprint">mvn package</code> which will produce a <a href="https://maven.apache.org/plugins/maven-shade-plugin/">shaded JAR</a>.</p>

<p>You can then execute Pyplyn by running <code class="prettyprint">java -jar pyplyn-[VERSION].jar</code>; where <em>VERSION</em> is the version you have built.</p>
