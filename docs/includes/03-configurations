<h1 id="configurations">Configurations</h1>

<blockquote>
<p>Configuration example: retrieves a time-series from Argus, filters out all but the last data point, buckets the value using specified thresholds, and finally loads the results into Refocus, by posting a sample <b>root.child.leaf.subject|PYPLYN_DEMO=[0-3]</b></p>
</blockquote>
<pre class="highlight json"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nt">"repeatIntervalMillis"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">60000</span><span class="p">,</span><span class="w">
    </span><span class="nt">"extract"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nt">"format"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Argus"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"endpoint"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"argus"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"cacheMillis"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">120000</span><span class="p">,</span><span class="w">
        </span><span class="nt">"defaultValue"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
        </span><span class="nt">"expression"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"SUM(-6m:-1m:scope:metric{tags}:avg:1m-max,#1m#)"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"argus-result-name"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"transform"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nt">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"LastDatapoint"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nt">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Threshold"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"criticalThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">500.0</span><span class="p">,</span><span class="w">
        </span><span class="nt">"warningThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="p">,</span><span class="w">
        </span><span class="nt">"infoThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="p">,</span><span class="w">
        </span><span class="nt">"type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"GREATER_THAN"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"applyToMetricName"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"argus-result-name"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"load"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nt">"format"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Refocus"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"endpoint"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"refocus-default"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"subject"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"root.child.leaf.subject"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"aspect"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"PYPLYN_DEMO"</span><span class="p">,</span><span class="w">
        </span><span class="nt">"relatedLinks"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nt">"disabled"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre>
<p>Now that you have Pyplyn up-and-running, you are ready to write your first configuration.</p>

<p>In Pyplyn terminology, a configuration is a JSON object, which specifies where the data is extracted from,
whether data should be combined from multiple sources, how it should be processed (transformed), and finally to what destination(s) it should be published (loaded onto).</p>

<p><br /></p>

<p>At this time, Pyplyn only supports two formats:</p>

<ul>
<li>Argus</li>
<li>Refocus</li>
</ul>

<p>However, the tool was built with extension in mind, and as such it is very simple to add new formats by writing minimal Java code; see the <a href="#extending-pyplyn">extending Pyplyn</a> section for more details.</p>

<p><br /></p>

<p>Each <em>configuration</em> file in the <em>app-config.json:configurationsPath</em> directory is a JSON array, which can hold one or multiple configurations that will be processed by Pyplyn.</p>

<h2 id="etl-models">ETL models</h2>

<p>Before we go any further, we want to explain some basic Pyplyn concepts regarding how configurations are composed and processed.</p>

<p>A <a href="https://github.com/salesforce/pyplyn/blob/master/plugin-api/src/main/java/com/salesforce/pyplyn/configuration/Configuration.java">Configuration</a> is a model that apart from defining the ETL stages, also specifies how often it should be processed (<em>repeatIntervalMillis</em>=long) and its enabled/disabled status (<em>disabled</em>=boolean).</p>

<p>Its ETL sections are model objects, which can be deserialized with Jackson, which extend one of the following interfaces:</p>

<ul>
<li><p><a href="https://github.com/salesforce/pyplyn/blob/master/plugin-api/src/main/java/com/salesforce/pyplyn/model/Extract.java">Extract</a>.</p></li>
<li><p><a href="https://github.com/salesforce/pyplyn/blob/master/plugin-api/src/main/java/com/salesforce/pyplyn/model/Transform.java">Transform</a></p></li>
<li><p><a href="https://github.com/salesforce/pyplyn/blob/master/plugin-api/src/main/java/com/salesforce/pyplyn/model/Load.java">Load</a></p></li>
</ul>

<p><br/></p>

<p>All configuration files specified in the <em>app-config.json:configurationsPath</em> directory are read by <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/etl/configuration/ConfigurationIntake.java">ConfigurationIntake</a>, which returns a Set&lt;Configuration&gt; object that is processed in stages (E/T/L) by <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/app/MetricDuct.java">MetricDuct</a>.</p>

<h2 id="extract-sources">Extract sources</h2>

<blockquote>
<p>Refocus extract object (model)</p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"format"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Refocus"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"endpoint"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"argus"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"cacheMillis"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nt">"subject"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"any.subject.path"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"aspect"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"SOURCE_ASPECT"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"defaultValue"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">0.0</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<h3 id="refocus-extract">Refocus extract</h3>

<p>This is an example of a <strong>Refocus extract</strong> configurations. Each extract format defines different parameters. You can read more details in the source code&rsquo;s documentation or by generating Javadocs with <code class="prettyprint">mvn package</code>.</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>format</td>
<td>required</td>
<td>the name of the model class that this object should be deserialized into (i.e.: <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/etl/extract/refocus/Refocus.java">Refocus</a>)</td>
</tr>
<tr>
<td>endpoint</td>
<td>required</td>
<td>identifies the connector to use, by matching against the (connectorId)[#connectors] parameter</td>
</tr>
<tr>
<td>cacheMillis</td>
<td>0</td>
<td>how long should this result be cached for (not reloaded from endpoint if processed by Pyplyn before the timeout expires); passing &ldquo;0&rdquo; means not caching it</td>
</tr>
<tr>
<td>subject</td>
<td>required</td>
<td>the subject to load from Refocus; _subject</td>
</tr>
<tr>
<td>aspect</td>
<td>required</td>
<td>the aspect to load from Refocus; _subject</td>
</tr>
<tr>
<td>defaultValue</td>
<td>optional</td>
<td>if a sample for the specified subject and aspect was not found on the Refocus endpoint, return this (double) value</td>
</tr>
</tbody></table>

<h3 id="argus-extract">Argus extract</h3>

<p>Most parameters of an <em>Argus extract</em> section are the same, except:</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>expression</td>
<td>required</td>
<td>the <a href="https://github.com/salesforce/Argus/wiki/Metrics">Argus metric</a> expression to execute against the specified endpoint</td>
</tr>
<tr>
<td>name</td>
<td>required</td>
<td>used to identify this series in the <a href="https://github.com/salesforce/pyplyn/blob/master/client/argus-client/src/main/java/com/salesforce/argus/model/MetricResponse.java">MetricResponse</a> object returned by the Argus API</td>
</tr>
</tbody></table>

<h2 id="transform-functions">Transform functions</h2>

<blockquote>
<p>Retrieving only the <strong>last data point</strong> of a series</p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"LastDatapoint"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<blockquote>
<p>Refocus example <strong>aspect</strong> definition</p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PYPLYN_DEMO"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"criticalRange"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">],</span><span class="w">
  </span><span class="nt">"warningRange"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">],</span><span class="w">
  </span><span class="nt">"infoRange"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">],</span><span class="w">
  </span><span class="nt">"okRange"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<blockquote>
<p>Bucketing value according to specified <strong>thresholds</strong></p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Threshold"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"criticalThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">500.0</span><span class="p">,</span><span class="w">
  </span><span class="nt">"warningThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="p">,</span><span class="w">
  </span><span class="nt">"infoThreshold"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mf">100.0</span><span class="p">,</span><span class="w">
  </span><span class="nt">"type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"GREATER_THAN"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p>After all the extract sources of a configuration have been processed, transformations are applied.</p>

<aside class="notice">
The Pyplyn project was written to process time-series and visualize them as <i>OK/WARN/ERR</i> statuses onto a Refocus dashboard. As such, you will find that all our examples are in that domain. However, the tool is not limited to that use-case and allows a significant degree of flexibility by writing new transformations.
</aside>

<p>Read the <a href="#extending-pyplyn">Extending Pyplyn</a> section for more details.</p>

<h3 id="the-lastdatapoint-transform">The <em>LastDatapoint</em> transform</h3>

<p>If the data source you are loading data from returns more than one point per &ldquo;Extract&rdquo; (which is usually the case when dealing with time-series data), you can use the <em>LastDatapoint</em> function to return only the most recent value. This is usually applied to Argus results.</p>

<h3 id="the-threshold-transform">The <em>Threshold</em> transform</h3>

<p>In our experience, it&rsquo;s easier to use Pyplyn configurations for defining thresholds, rather than relying directly on Refocus&rsquo; aspects, as they can only define one set of intervals which do not take into the consideration where the source data is originating from.</p>

<p>This works well if your data always has the same thresholds, but not so much if some of the data points you are tracking against the same ASPECT have different meanings of OK/INFO/WARN/ERR.</p>

<p>The Threshold function buckets the four statuses as integers ranging from 0 to 3, which correctly map to aspects we define in Refocus.</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>name</td>
<td>required</td>
<td>the name of the model class that this object should be deserialized into (i.e.: <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/etl/transform/threshold/Threshold.java">Threshold</a>)</td>
</tr>
<tr>
<td>type</td>
<td>enumeration</td>
<td>GREATER_THAN, LESS_THAN; defines how values are compared against the specified thresholds</td>
</tr>
<tr>
<td>criticalThreshold</td>
<td>optional</td>
<td>determines where the CRIT interval starts; leave null to skip</td>
</tr>
<tr>
<td>warningThreshold</td>
<td>optional</td>
<td>determines where the WARN interval starts; leave null to skip</td>
</tr>
<tr>
<td>infoThreshold</td>
<td>optional</td>
<td>determines where the INFO interval starts; leave null to skip</td>
</tr>
<tr>
<td>okThreshold</td>
<td>optional</td>
<td>determines where the OK interval starts</td>
</tr>
<tr>
<td>applyToMetricName</td>
<td>optional</td>
<td>If specified, the current transform will only be applied to <a href="https://github.com/salesforce/pyplyn/blob/master/plugin-api/src/main/java/com/salesforce/pyplyn/model/TransformationResult.java">TransformationResult</a>s that have the same name</td>
</tr>
</tbody></table>

<aside class="notice">Thresholds are evaluated from most critical to least critical. The first one that matches is returned. If one of the series you are processing with Pyplyn does not have one of the four statuses, you can skip its definition (i.e.: setting <i>criticalThreshold=null</i>, the most you will get is a <i>WARN</i>.</aside>

<h2 id="load-destinations">Load destinations</h2>

<blockquote>
<p>Publishing the results as a sample under the specified subject path and aspect <b>root.child.leaf.subject|PYPLYN_DEMO=[0-3]</b></p>
</blockquote>
<pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nt">"format"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Refocus"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"endpoint"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"refocus-default"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"subject"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"root.child.leaf.subject"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"aspect"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"PYPLYN_DEMO"</span><span class="p">,</span><span class="w">
  </span><span class="nt">"relatedLinks"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p>Finally, after transformations have been applied, the results will be pushed to one (or more) Load destinations.</p>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>format</td>
<td>required</td>
<td>the name of the model class that this object should be deserialized into (i.e.: <a href="https://github.com/salesforce/pyplyn/blob/master/duct/src/main/java/com/salesforce/pyplyn/duct/etl/load/refocus/Refocus.java">Refocus</a>)</td>
</tr>
<tr>
<td>endpoint</td>
<td>required</td>
<td>identifies the connector to use, by matching against the (connectorId)[#connectors] parameter</td>
</tr>
<tr>
<td>subject</td>
<td>required</td>
<td>the Refocus subject to publish to; _subject</td>
</tr>
<tr>
<td>aspect</td>
<td>required</td>
<td>the Refocus aspect to publish to; _subject</td>
</tr>
<tr>
<td>relatedLinks</td>
<td>optional</td>
<td>a list of links that will be associated with the published Sample; should specify two parameters, <em>name</em> and <em>URL</em></td>
</tr>
</tbody></table>
